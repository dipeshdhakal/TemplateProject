//
//  Item.swift
//  TemplateProject
//
//  Created by Dipesh Dhakal on 25/5/2024.
//

import Foundation
import SwiftData

/// Represents an  item
@Model
class Item: Identifiable, Codable {
    /// item id, uniquely identifies the item
    @Attribute(.unique)
    var itemID: String
    /// item title
    var itemTitle: String
    /// date of the item
    var itemDate: Date
    
    /// Initialiser
    /// - Parameters:
    ///  - itemID: item id, uniquely identifies the item; generated by default
    ///  - itemTitle: item title
    ///  - itemDate: date of the item
    init(itemID: String = UUID().uuidString, itemTitle: String, itemDate: Date) {
        self.itemID = itemID
        self.itemTitle = itemTitle
        self.itemDate = itemDate
    }
    
    private enum CodingKeys: String, CodingKey {
        case itemID
        case itemTitle
        case itemDate
    }
    
    required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        itemID = try container.decode(String.self, forKey: .itemID)
        itemTitle = try container.decode(String.self, forKey: .itemTitle)
        itemDate = try container.decode(Date.self, forKey: .itemDate)
    }

    func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(itemID, forKey: .itemID)
        try container.encode(itemTitle, forKey: .itemTitle)
        try container.encode(itemDate, forKey: .itemDate)
    }
}

extension Item {
    static var previewItems = [
        Item(itemID: "0", itemTitle: "Item 1", itemDate: Date()),
        Item(itemID: "1", itemTitle: "Item 2", itemDate: Date()),
        Item(itemID: "2", itemTitle: "Item 3", itemDate: Date())
    ]
}
